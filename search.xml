<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>科研写作</title>
      <link href="/2024/04/22/ke-yan-xie-zuo/"/>
      <url>/2024/04/22/ke-yan-xie-zuo/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 科研技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> writting </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科研作图</title>
      <link href="/2024/04/22/ke-yan-zuo-tu/"/>
      <url>/2024/04/22/ke-yan-zuo-tu/</url>
      
        <content type="html"><![CDATA[<p>文本测试，密码测试，图片测试，代码测试。。。文本测试，密码测试，图片测试，代码测试。。。文本测试，密码测试，图片测试，代码测试。。。文本测试，密码测试，图片测试，代码测试。。。文本测试，密码测试，图片测试，代码测试。。。文本测试，密码测试，图片测试，代码测试。。。文本测试，密码测试，图片测试，代码测试。。。</p><pre class=" language-lang-python"><code class="language-lang-python">import pybinding as pbimport numpy as npimport matplotlib.pyplot as pltpb.pltutils.use_style()</code></pre><p><code>pb</code>习惯被用来导入pybinding。和习惯用<code>np</code>以及<code>plt</code>的用法一样。</p><p>函数<code>pb.pltutils.use_style()</code>应用的是pybinding对matplotlib默认的的设置类型。画图方面是非常的个性化。</p><h3 id="Lattice"><a href="#Lattice" class="headerlink" title="Lattice"></a>Lattice</h3><p><code>Lattice</code>单元是用来描述晶体晶格。其中包含了子晶格的基本的矢量，位置以及连接子晶格点的耦合参数。所有的这些信息都可以用转移来构建大系统。</p><h4 id="Square-Lattice"><a href="#Square-Lattice" class="headerlink" title="Square Lattice"></a>Square Lattice</h4><p>从这些基本元素中，我们可以构建一个简单的方形格点</p><pre class=" language-lang-python"><code class="language-lang-python">import pybinding as pbd = 0.2 # [nm] unit cell lengtht = 1   # [eV] hopping energy# create a simple 2D lattice with vectors a1 and a2lattice = pb.Lattice(a1=[d,0],a2=[0,d])lattice.add_sublattices(    ('A',[0,0]) # add an atom called 'A' at position [0,0])lattice.add_hoppings(    # (relative_index, from_sublattice, to_sublattice, energy)    ([0,1],'A','A',t)    ([1,0],'A','A',t))</code></pre><p>但是这个还是不能马上看到代码干了什么。幸运的是，<code>Lattice</code>语句有一个很方面的<code>Lattice.plot()</code>方法可以很容易的看到晶格的构建。</p><pre class=" language-lang-python"><code class="language-lang-python">lattice.plot() # plot the lattice that was just constructedplt.show()     # standard matplotlib show() function</code></pre><p><img src="/2024/04/22/ke-yan-zuo-tu/sublattice.jpg" alt="pybinding的sublattice的构建过程"></p><p>在上图中，我们看到晶格矢量$\mathbf{a}_1$和$\mathbf{a}_2$被用来去初始化<code>Lattice</code>。这些矢量描述了一个拥有无限位置设置的布拉维晶格</p><script type="math/tex; mode=display">\mathbf{R}=n_1\mathbf{a}_1+n_2\mathbf{a}_2</script><p>这里的$n_1$和$n_2$是整数。蓝色圆圈标签为A描述了由<code>Lattice.add_sublattice()</code>方法产生的原子。渐渐的颜色消失的圆圈代表了格点在基础矢量方向的传播的格点，比如，利用整数$[n_1,n_2]$。</p><p>耦合项是利用<code>Lattice.add_hopping()</code>方法指定的并且每一个耦合项是由<code>(relative_index,from_sublattice,to_sublattice,energy)</code>组成:</p><ul><li>主要的胞元总是有指标$[n_1,n_2]=[0,0]$。<code>relative_index</code>代表从主胞元到另一个胞元需要的整数的步骤的数量。每一个胞元都有<code>relative_index</code>，就像图中所示。</li><li>耦合是由<code>relative_index</code>指定的主要胞元和临近胞元产生的。两个耦合被加入了定义：$[0,1]$和$[1,0]$。相反的耦合为$[0,-1]$和$[-1,0]$是自动加入的以保持遗传性。</li><li>这个晶格只由一种子晶格组成因此<code>from</code>和<code>to</code>子晶格场是琐碎的。一般来说，<code>from_sublattice</code>表示子晶格在$[0,0]$并且<code>to_sublattice</code>在临近的胞元。在后面的例子中将会进一步解释。</li><li>最后的一项是耦合能量的参数。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研技能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> plotting </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
